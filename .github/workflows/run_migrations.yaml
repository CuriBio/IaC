name: 'Run Database Migration'
on:
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Enter workspace'
        required: true
        default: ''

jobs:
  migrations:
    name: 'Run database migration'
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-20.04'
        python-version:
          - 3.9

    runs-on: ${{ matrix.os }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_user_id: ${{ github.actor }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_DEFAULT_OUTPUT: json
      WORKSPACE: ${{ github.event.inputs.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Setup Python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"
          python -m venv venv

      - name: Activate virtual environment (Linux/MacOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: . venv/bin/activate

      - name: Display Pip Version and confirm environment empty
        run: |
          pip -V
          pip freeze

      - name: Cache Python dependencies
        uses: actions/cache@v3.0.11
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-

      - name: Install Dev Dependencies
        run: pip install -r requirements-dev.txt

      - name: Log full installed packages
        run: pip freeze

      - name: 'Terraform setup'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: Access selected Terraform outputs
        run: |
          echo OUTPUTS=$(python ./.github/scripts/tf-deploy-env.py --workspace ${{ env.WORKSPACE }} --output) >> $GITHUB_ENV
          echo $OUTPUTS

      - name: Run migration
        run: |
          chmod +x .github/scripts/configure_aws.sh
          . .github/scripts/configure_aws.sh

          alembic upgrade head
          alembic history --verbose

      - name: Test migration
        run: |
          chmod +x .github/scripts/configure_aws.sh
          . .github/scripts/configure_aws.sh

          alembic downgrade -1

          alembic upgrade head
          alembic history --verbose
