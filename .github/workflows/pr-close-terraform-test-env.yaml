name: 'Close PR into Development'
on:
  workflow_dispatch:
    inputs:
      randomlyseed:
        description: 'Pytest Randomly Seed'
        required: false
        default: ''
  pull_request:
    types: [closed]
    branches-ignore:
    - 'main'

jobs:
  terraform:
    name: 'Terraform PR Close'
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-20.04"
        python-version:
            - 3.9

    runs-on: ${{ matrix.os }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_user_id: ${{ github.actor }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 'Setup Python'
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: |
        python -c "import sys; print(sys.version)"
        python -m venv venv

    - name: Activate virtual environment (Linux/MacOS)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: . venv/bin/activate

    - name: Display Pip Version and confirm environment empty
      run: |
        pip -V
        pip freeze

    - name: Cache Python dependencies
      uses: actions/cache@v2.1.4
      env:
        cache-name: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-

    - name: Install Dev Dependencies
      run: pip install -r requirements-dev.txt

    - name: Log full installed packages
      run: pip freeze

    - name: 'Terraform setup'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.7

    - name: 'Terraform destroy PR environment'
      run: python ./.github/scripts/tf-deploy-env.py --workspace "iac-${{ github.event.pull_request.number }}" --destroy

    - name: 'Terraform apply test environment'
      if: github.event.pull_request.merged == true
      run: python ./.github/scripts/tf-deploy-env.py --workspace test --apply

    - name: Setup SSH and DB test ENV
      run: |
        OUTPUTS=$(python ./.github/scripts/tf-deploy-env.py --workspace test --output)
        TEST_ROLE_ARN=$(jq -r .role_arn.value <<< $OUTPUTS)
        echo $TEST_ROLE_ARN
        DB_KEY_ARN=$(jq -r .jump_ec2_arn.value <<< $OUTPUTS)
        echo $DB_KEY_ARN
        DB_CREDS_ARN=$(jq -r .db_creds_arn.value <<< $OUTPUTS)
        echo $DB_CREDS_ARN
        DB_HOST=$(jq -r .db_cluster_endpoint.value <<< $OUTPUTS)
        echo $DB_HOST
        EC2_HOST=$(jq -r .jump_host.value <<< $OUTPUTS)
        echo $EC2_HOST

        chmod +x ./.github/scripts/aws_db_setup.sh
        ./.github/scripts/aws_db_setup.sh $TEST_ROLE_ARN $DB_KEY_ARN $DB_CREDS_ARN $DB_HOST $EC2_HOST

    - name: 'Terraform apply modl environment'
      if: github.event.pull_request.merged == true
      run: python ./.github/scripts/tf-deploy-env.py --workspace modl --apply

    - name: Setup SSH and DB for modl ENV
      run: |
        OUTPUTS=$(python ./.github/scripts/tf-deploy-env.py --workspace modl --output)
        TEST_ROLE_ARN=$(jq -r .role_arn.value <<< $OUTPUTS)
        echo $TEST_ROLE_ARN
        DB_KEY_ARN=$(jq -r .jump_ec2_arn.value <<< $OUTPUTS)
        echo $DB_KEY_ARN
        DB_CREDS_ARN=$(jq -r .db_creds_arn.value <<< $OUTPUTS)
        echo $DB_CREDS_ARN
        DB_HOST=$(jq -r .db_cluster_endpoint.value <<< $OUTPUTS)
        echo $DB_HOST
        EC2_HOST=$(jq -r .jump_host.value <<< $OUTPUTS)
        echo $EC2_HOST

        chmod +x ./.github/scripts/aws_db_setup.sh
        ./.github/scripts/aws_db_setup.sh $TEST_ROLE_ARN $DB_KEY_ARN $DB_CREDS_ARN $DB_HOST $EC2_HOST
